@page "/editor"
@using System.Net.Http.Json
@using YouLookGoodInPrint.Shared
@inject HttpClient Http
@inject TokenContainer tokenContainer
@inject DocumentsContainer docContainer
@inject NavigationManager UriHelper

@{
    @if (tokenContainer.Token == "null")
    {
        <p>You are not signed in.</p>
    }

    else
    {
        <html>
        <head>
            <style>

        .editor{
            display: grid;
        }

        .text-area {
            border: solid 1px #ccc;
            padding: 20px;
            height: @editorHeight;
            width: @editorWidth;
            resize: none;
                }

        .toolbar
        {
            border: solid 1px #ddd;
            background: #f4f4f4;
            padding: 5px;
            border-radius: 3px;
            display: flex;
            width: @editorWidth;
        }

        .toolbar > span {
            cursor: pointer;
        }

            .toolbar > span:hover {
                text-decoration: underline;
            }

        .titlebar {
            border: solid 1px #ccc;
            background: #ffffff;
            padding: 20px;
            width: @editorWidth;
            height: 20px;
            justify-content: center;
        }


            </style>
        </head>

        <body>
            <div class="editor">
                <div class="toolbar">
                    <input class="titlebar" type="text" @bind="titlebarContent">
                    <button class="btn btn-primary" @onclick="Save" type="submit">Save</button>
                    <button class="btn btn-primary" @onclick="Close" type="submit">Close</button>
                </div>

                <form>
                    <textarea class="text-area" @bind="textAreaContent"></textarea>
                </form>
            </div>

            <p>@saveStatus</p>
        </body>

    </html>
}


}

@code
{
    public string editorHeight = "800px";
    public string editorWidth = "600px";

    public string titlebarContent = "";
    public string textAreaContent = "";
    public string saveStatus = "";

    protected override async Task OnInitializedAsync()
    {
        if (!docContainer.NoDocumentSelected)
        {
            titlebarContent = docContainer.CurrentDocument.Name;
            textAreaContent = docContainer.CurrentDocument.Content;
        }
    }

    public async Task Save()
    {
        if (titlebarContent == "")
        {
            saveStatus = "Please add a title.";
            return;
        }

        if (!docContainer.NoDocumentSelected)
            await SaveModifiedDocument();

        else
            await SaveNewDocument();
    }

    public async Task SaveModifiedDocument()
    {
        docContainer.CurrentDocument.Name = titlebarContent;
        docContainer.CurrentDocument.Content = textAreaContent;
        docContainer.SortByName();

        HttpResponseMessage response;
        ServerMessage message;
        ItemData<Document> docData = new ItemData<Document>(docContainer.CurrentDocument, tokenContainer.UserName, tokenContainer.Token, "modify");
        response = await Http.PostAsJsonAsync<ItemData<Document>>("Documents", docData);
        message = await response.Content.ReadAsAsync<ServerMessage>();

        if (message.Type == "error")
        {
            saveStatus = "Couldn't save document!";
            return;
        }

        else
        {
            saveStatus = message.Message;
            return;
        }

    }

    public async Task SaveNewDocument()
    {
        Document newDocument = new Document(titlebarContent, tokenContainer.UserName, textAreaContent);

        HttpResponseMessage response;
        ServerMessage message;
        ItemData<Document> docData = new ItemData<Document>(newDocument, tokenContainer.UserName, tokenContainer.Token, "modify");
        response = await Http.PostAsJsonAsync<ItemData<Document>>("Documents", docData);
        message = await response.Content.ReadAsAsync<ServerMessage>();

        if (message.Type == "error")
        {
            saveStatus = "Couldn't create document!";
            return;
        }

        else
        {
            saveStatus = message.Message;
            return;
        }
    }

    public async Task Close()
    {
        docContainer.NoDocumentSelected = true;
        UriHelper.NavigateTo("documents");
    }
}
