@page "/documents"
@using System.Net.Http.Json
@using YouLookGoodInPrint.Shared
@inject HttpClient Http
@inject TokenContainer tokenContainer
@inject DocumentsContainer docContainer
@inject PrintContainer pContainer
@inject NavigationManager UriHelper

<h3>Documents</h3>

@{
    @if (tokenContainer.Token == "null")
    {
        <p>You are not signed in.</p>
    }

    else if (docContainer.Documents == null)
    {
        <p><em>Loading...</em></p>
    }

    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Creation Date</th>
                    <th>Options</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var doc in docContainer.Documents)
                    if (doc.ParentId == "0")
                    {
                        <tr>
                            <td>@doc.Name</td>
                            <td>@doc.CreationDate.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => Edit(doc.Id)">Edit</button>
                                <button class="btn btn-primary" @onclick="() => Delete(doc.Id)">Delete</button>
                                <button class="btn btn-primary" @onclick="() => Print(doc.Name)">Print</button>
                                <button class="btn btn-primary" @onclick="() => Restore(doc.Id)">Versions</button>
                            </td>
                        </tr>
                    }
            </tbody>
        </table>

        <button class="btn btn-primary" @onclick="NewDocument">New Document</button>
        <button class="btn btn-primary" @onclick="AccesUpload">Upload Document</button>
        <p>@status</p>
        }
    }

@code {

    public string docname;
    public string status = "";

    public async Task Edit(string id)
    {
        foreach (Document doc in docContainer.Documents)
        {
            if (doc.Id == id)
            {
                docContainer.SelectDocument(doc);
                docContainer.NoDocumentSelected = false;
            }
        }

        UriHelper.NavigateTo("editor");
    }

    public async Task Print(string name)
    {
        foreach (Document doc in docContainer.Documents)
        {
            if (doc.Name == name)
                docContainer.CurrentDocument = doc;
        }

        UriHelper.NavigateTo("print");
    }

    public async Task Delete(string id)
    {
        HttpResponseMessage response;
        ServerMessage message;

        Document document = docContainer.GetById(id);
        ItemData<Document> docData = new ItemData<Document>(document, tokenContainer.UserName, tokenContainer.Token, "delete");

        response = await Http.PostAsJsonAsync<ItemData<Document>>("Documents", docData);
        message = await response.Content.ReadAsAsync<ServerMessage>();

        if (message.Type == "error")
        {
            status = "Couldn't delete document!";
            return;
        }

        docContainer.DeleteDocument(id);
        status = "Document deleted.";
    }

    public async Task Restore(string id)
    {
        Document document = docContainer.GetById(id);
        docContainer.SelectDocument(document);
        UriHelper.NavigateTo("versions");
    }

    public async Task AccesUpload()
    {
        UriHelper.NavigateTo("upload");
    }

    public async Task NewDocument()
    {
        HttpResponseMessage response;
        ServerMessage message;

        Document newDocument = new Document("New Document", tokenContainer.UserName, "", "0");
        ItemData<Document> docData = new ItemData<Document>(newDocument, tokenContainer.UserName, tokenContainer.Token, "modify");


        response = await Http.PostAsJsonAsync<ItemData<Document>>("Documents", docData);
        message = await response.Content.ReadAsAsync<ServerMessage>();

        if (message.Type == "error")
        {
            status = "Couldn't create document!";
            return;
        }

        docContainer.AddDocument(newDocument);
    }
}
