@page "/sign_in"
@using System.Net.Http.Json
@using YouLookGoodInPrint.Shared
@inject HttpClient Http
@inject TokenContainer tokenContainer
@inject DocumentsContainer docContainer

<h3>Sign In</h3>
@{
    @if (tokenContainer.Token == "null")
    {
        <form>
            <fieldset>
                <div>
                    <label for="username">User</label>
                    <input type="text" @bind="username" />
                </div>

                <div>
                    <label for="password_text">Password</label>
                    <input type="password" @bind="password" />
                </div>
            </fieldset>
        </form>

        <button class="btn btn-primary" @onclick="Submit">Submit</button>
        <p>@status</p>
    }

    else
    {
        <p>You are signed in as @tokenContainer.UserName.</p>
        <button class="btn btn-primary" @onclick="LogOut">Logout</button>
    }
}

@code {
    public string username = "", password = "", status;

    public async Task Submit()
    {
        if (username == "" || password == "")
        {
            status = "Fill in the form.";
            return;
        }

        string hash = password.GetHash();
        Credentials credentials = new Credentials(username, hash);

        HttpResponseMessage postResponse = await Http.PostAsJsonAsync<Credentials>("SignIn", credentials);
        var response = await postResponse.Content.ReadAsAsync<SignInResponse>();

        if (response.Type == "error")
        {
            status = response.Message;
            return;
        }

        if (response.Type == "token")
        {
            tokenContainer.Token = response.Message;
            tokenContainer.UserName = username;
            await getDocuments();
            status = "Signed in successfully!";
            return;
        }
    }

    public async Task LogOut()
    {
        clearForm();
        tokenContainer.Clear();
        docContainer.Clear();
        return;
    }

    public void clearForm()
    {
        username = "";
        password = "";
        status = "";
    }

    public async Task getDocuments()
    {
        HttpResponseMessage response;

        if (tokenContainer.Token != "null")
        {
            response = await Http.PostAsJsonAsync<string>("Documents", tokenContainer.Token);
            docContainer.documents = await response.Content.ReadAsAsync<List<Document>>();
        }
    }
}
