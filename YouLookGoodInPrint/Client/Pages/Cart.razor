@page "/cart"
@using System.Net.Http.Json
@using YouLookGoodInPrint.Shared
@using YouLookGoodInPrint.Shared.Entities
@inject HttpClient Http
@inject TokenContainer tokenContainer
@inject DocumentsContainer docContainer
@inject PrintContainer printContainer
@inject NavigationManager UriHelper
@inject PaymentsContainer payContainer
<h3>Cart</h3>

@{
    @if (tokenContainer.Token == "null")
    {
        <p>You are not signed in.</p>
    }

    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Document Title</th>
                    <th>Price</th>
                    <th>Options</th>
                </tr>
            </thead>
            <tbody>
                @if (payContainer.Payments != null)
                {
                    foreach (var pay in payContainer.Payments)
                    {
                        <tr>
                            <td>@pay.DocumentTitle</td>
                            <td>@pay.Price €</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => Delete(pay.Id)">Remove</button>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td><b>Total</b></td>
                        <td><b>@payContainer.PriceSum() €</b></td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-primary" @onclick="Submit">Checkout</button>
        <p>@status</p>
    }
}

@code {
    public string status = "";

    public async Task Delete(string id)
    {
        Payment payment = payContainer.GetById(id);
        ItemData<Payment> payData = new ItemData<Payment>(payment, tokenContainer.UserName, tokenContainer.Token, "delete");

        printContainer.DeletePrint(payment.PrintId);
        payContainer.DeletePayment(id);

    }

    public async Task Edit(string id)
    {
        Payment payment = payContainer.GetById(id);
        Print print = printContainer.GetById(payment.PrintId);
        printContainer.selectPrint(print);

        UriHelper.NavigateTo("print");
    }

    public async Task Submit()
    {
        HttpResponseMessage response;
        ServerMessage printMessage, payMessage;

        ItemData<List<Print>> printData = new ItemData<List<Print>>(printContainer.Prints, tokenContainer.UserName, tokenContainer.Token, "");
        response = await Http.PostAsJsonAsync<ItemData<List<Print>>>("Print", printData);
        printMessage = await response.Content.ReadAsAsync<ServerMessage>();

        ItemData<List<Payment>> payData = new ItemData<List<Payment>>(payContainer.Payments, tokenContainer.UserName, tokenContainer.Token, "");
        response = await Http.PostAsJsonAsync<ItemData<List<Payment>>>("Payments", payData);
        payMessage = await response.Content.ReadAsAsync<ServerMessage>();

        if (printMessage.Type == "error" || payMessage.Type == "error")
            status = "Invalid token!";
        else
        {
            printContainer.Clear();
            payContainer.Clear();
            status = "Order complete!";
        }
    }
}